#! /usr/bin/env python3.8
# 视频转字符视频

from PIL import Image, ImageFont, ImageDraw
import numpy
import cv2
import pyprind
import argparse
import os
import subprocess

def video2charVideo(videofile):

    frames = []
    cap = cv2.VideoCapture(videofile)
    fps = cap.get(cv2.CAP_PROP_FPS)
    font = ImageFont.load_default().font
    font_w, font_h = font.getsize(CHARS[1])
    font_h += 2
    print('[INFO]: Convert video to charFrames...')

    for i in pyprind.prog_bar(range(int(cap.get(7)))):
        frame = cap.read()[1]
        frame = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        frame = frame.resize((font_w*frame.width//font_w, font_h*frame.height//font_h), Image.NEAREST)
        width_ori = frame.width
        height_ori = frame.height
        frame = frame.resize((width_ori//font_w, height_ori//font_h), Image.NEAREST)
        width = frame.width
        height = frame.height
        txt = ''
        colors = []
    
        for i in range(height):
            for j in range(width):
                pixel = frame.getpixel((j, i))
                colors.append(pixel[:3])
                txt += rgb2Char(*pixel)

        frame_new = Image.new('RGB', (width_ori, height_ori), (255, 255, 255))
        draw = ImageDraw.Draw(frame_new)
        x = y = 0
        for j in range(len(txt)):
            if x == width_ori:
                x = 0
                y += font_h
            draw.text((x, y), txt[j], font=font, fill=colors[j])
            x += font_w
        frames.append(frame_new)
    cap.release()
    fourcc = cv2.VideoWriter_fourcc(*"MJPG")
    v_writer = cv2.VideoWriter('cache.avi', fourcc, fps, frames[0].size)
    print('[INFO]: Convert charFrames to charVideo...')
    for i in pyprind.prog_bar(range(len(frames))):
        frame = frames[i]
        frame = cv2.cvtColor(np.asarray(frame), cv2.COLOR_RGB2BGR)
        v_writer.write(frame)
    v_writer.release()
    return True

def extractMP3(videofile):
    subprocess.call('ffmpeg -i %s -f mp3 cache.mp3' % videofile, shell=True)
    return True

'''合并视频和音频'''
def combineVideoMP3(videopath='cache.avi', mp3path='cache.mp3', remove=True):
    subprocess.call('ffmpeg -i %s -i %s -strict -2 -f mp4 %s' % (videopath, mp3path, 'results.mp4'), shell=True)
    if remove:
        os.remove(videopath)
        os.remove(mp3path)

if __name__ == '__main__':
    videofile = 'test.mp4'
    combineVideoMP3()
